@model IEnumerable<ASI.Basecode.WebApp.Models.CategoryModel>

@{
    ViewData["Title"] = "Category List";
}

<h2 class="text-2xl font-bold mb-6">@ViewData["Title"]</h2>

<!-- Create New Category Card (Click to open the modal) -->
<div class="mb-8">
    <div id="newCategoryCard" class="bg-gray-200 p-6 rounded-lg shadow-lg flex items-center justify-center border-dashed border-2 border-gray-400 cursor-pointer w-32 h-32" onclick="openCreateModal()">
        <i class="fas fa-plus text-4xl text-gray-400"></i>
    </div>
</div>

<!-- Income Categories -->
<h3 class="text-xl font-semibold mb-4">Income</h3>
<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mb-8" id="incomeCategoryGrid">
    @foreach (var item in Model.Where(c => c.Type == "Income"))
    {
        <div class="p-6 rounded-lg shadow-lg text-white relative flex flex-col items-center justify-center" style="background-color:@item.Color;">
            <!-- Icon -->
            <i class="@item.Icon text-6xl mb-4"></i>
            <!-- Category Name -->
            <h3 class="text-xl font-bold text-center">@item.Name</h3>
            <!-- Edit Icon -->
            <a href="javascript:void(0);" onclick="openEditModal('@item.Id')" class="absolute top-2 right-2 text-white hover:text-gray-300">
                <i class="fas fa-pencil-alt"></i>
            </a>
        </div>
    }
</div>

<!-- Expense Categories -->
<h3 class="text-xl font-semibold mb-4">Expense</h3>
<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6" id="expenseCategoryGrid">
    @foreach (var item in Model.Where(c => c.Type == "Expense"))
    {
        <div class="p-6 rounded-lg shadow-lg text-white relative flex flex-col items-center justify-center" style="background-color:@item.Color;">
            <!-- Icon -->
            <i class="@item.Icon text-6xl mb-4"></i>
            <!-- Category Name -->
            <h3 class="text-xl font-bold text-center">@item.Name</h3>
            <!-- Edit Icon -->
            <a href="javascript:void(0);" onclick="openEditModal('@item.Id')" class="absolute top-2 right-2 text-white hover:text-gray-300">
                <i class="fas fa-pencil-alt"></i>
            </a>
        </div>
    }
</div>

<!-- Create Category Modal -->
<div id="createCategoryModal" class="hidden fixed z-10 inset-0 overflow-y-auto bg-gray-800 bg-opacity-50">
    <div class="flex items-center justify-center min-h-screen">
        <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold">Add Category</h2>
                <button id="closeCreateModal" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p class="mb-4 text-sm text-gray-500">Fill out all the fields below to add a category.</p>

            <!-- Form -->
            <form id="categoryForm">
                @Html.AntiForgeryToken()
                <!-- Type Selector (Expense/Income) -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
                    <div class="flex space-x-4">
                        <button type="button" id="createExpenseButton" class="type-button px-4 py-2 border rounded-md">Expense</button>
                        <button type="button" id="createIncomeButton" class="type-button px-4 py-2 border rounded-md">Income</button>
                    </div>
                    <!-- Hidden input to store the selected type -->
                    <input type="hidden" name="Type" id="createTypeInput" value="Expense" />
                </div>

                <!-- Name Input -->
                <div class="mb-6">
                    <label for="createName" class="block text-sm font-medium text-gray-700">Name</label>
                    <input type="text" name="Name" id="createName" placeholder="Enter Name" class="mt-1 block w-full px-4 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" required />
                </div>

                <!-- Icon Input -->
                <div class="mb-6">
                    <label for="createIcon" class="block text-sm font-medium text-gray-700">Icon</label>
                    <select name="Icon" id="createIcon" class="mt-1 block w-full px-4 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Select Icon</option>
                        <option value="fas fa-apple-alt">Apple (Food)</option>
                        <option value="fas fa-shopping-bag">Shopping Bag</option>
                        <option value="fas fa-bolt">Bolt (Electricity)</option>
                        <option value="fas fa-wallet">Wallet (Income)</option>
                        <option value="fas fa-money-bill-wave">Money (Expense)</option>
                    </select>
                </div>

                <!-- Color Picker -->
                <div class="mb-6">
                    <label for="createColorPicker" class="block text-sm font-medium text-gray-700">Select Color</label>
                    <input type="color" name="Color" id="createColorPicker" class="mt-1 block w-full px-4 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" required />
                </div>

                <!-- Confirm Button -->
                <div class="mt-6">
                    <button type="submit" class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 rounded-md">
                        Confirm
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Category Modal -->
<div id="editCategoryModal" class="hidden fixed z-50 inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-bold">Edit Category</h2>
            <button id="closeEditModal" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <p class="mb-4 text-sm text-gray-500">Fill out all the fields below to edit the category.</p>

        <!-- Edit Form -->
        <form id="editCategoryForm">
            @Html.AntiForgeryToken()
            <!-- Hidden ID Field -->
            <input type="hidden" name="Id" id="editId" />

            <!-- Type Selector (Expense/Income) -->
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
                <div class="flex space-x-4">
                    <button type="button" id="editExpenseButton" class="type-button px-4 py-2 border rounded-md">Expense</button>
                    <button type="button" id="editIncomeButton" class="type-button px-4 py-2 border rounded-md">Income</button>
                </div>
                <!-- Hidden input to store the selected type -->
                <input type="hidden" name="Type" id="editTypeInput" />
            </div>

            <!-- Name Input -->
            <div class="mb-6">
                <label for="editName" class="block text-sm font-medium text-gray-700">Name</label>
                <input type="text" name="Name" id="editName" placeholder="Enter Name" class="mt-1 block w-full px-4 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" required />
            </div>

            <!-- Icon Input -->
            <div class="mb-6">
                <label for="editIcon" class="block text-sm font-medium text-gray-700">Icon</label>
                <select name="Icon" id="editIcon" class="mt-1 block w-full px-4 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Select Icon</option>
                    <option value="fas fa-apple-alt">Apple (Food)</option>
                    <option value="fas fa-shopping-bag">Shopping Bag</option>
                    <option value="fas fa-bolt">Bolt (Electricity)</option>
                    <option value="fas fa-wallet">Wallet (Income)</option>
                    <option value="fas fa-money-bill-wave">Money (Expense)</option>
                </select>
            </div>

            <!-- Color Picker -->
            <div class="mb-6">
                <label for="editColorPicker" class="block text-sm font-medium text-gray-700">Select Color</label>
                <input type="color" name="Color" id="editColorPicker" class="mt-1 block w-full px-4 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" required />
            </div>

            <!-- Save and Delete Buttons -->
            <div class="flex justify-between mt-6">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-md">
                    Save
                </button>
                <button type="button" class="bg-red-500 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-md" id="deleteButton">
                    Delete
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Function to open the Create modal
    function openCreateModal() {
        document.getElementById('createCategoryModal').classList.remove('hidden');
        // Set default type to Expense
        setTypeSelection('create', 'Expense');
    }

    // Close the create modal
    document.getElementById('closeCreateModal').addEventListener('click', function () {
        document.getElementById('createCategoryModal').classList.add('hidden');
    });

    // Handle type selection for Create Modal
    document.getElementById('createExpenseButton').addEventListener('click', function () {
        setTypeSelection('create', 'Expense');
    });

    document.getElementById('createIncomeButton').addEventListener('click', function () {
        setTypeSelection('create', 'Income');
    });

    // Handle form submission for creating a new category
    document.getElementById('categoryForm').addEventListener('submit', async function (event) {
        event.preventDefault(); // Prevent the form from submitting normally

        const formData = new FormData(this);

        try {
            const response = await fetch('/Category/Create', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                // Close the modal before refreshing the page
                document.getElementById('createCategoryModal').classList.add('hidden');

                // Refresh the page to show the newly added category
                window.location.reload(); // This will reload the entire page and show the updated list
            } else {
                alert('Failed to save category. Please try again.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error occurred while saving the category.');
        }
    });

    // Function to open the Edit modal and populate the form with category data
    async function openEditModal(categoryId) {
        try {
            const response = await fetch(`/Category/GetCategory/${categoryId}`);
            if (response.ok) {
                const category = await response.json();

                // Populate the edit form fields with category data
                document.getElementById('editId').value = category.id;
                document.getElementById('editName').value = category.name;
                document.getElementById('editIcon').value = category.icon;
                document.getElementById('editColorPicker').value = category.color;

                // Set the Type selection
                setTypeSelection('edit', category.type);

                // Show the edit modal
                document.getElementById('editCategoryModal').classList.remove('hidden');
            } else {
                alert('Failed to load category data.');
            }
        } catch (error) {
            console.error('Error loading category data:', error);
            alert('Error occurred while loading the category data.');
        }
    }

    // Close the edit modal
    document.getElementById('closeEditModal').addEventListener('click', function () {
        document.getElementById('editCategoryModal').classList.add('hidden');
    });

    // Handle type selection for Edit Modal
    document.getElementById('editExpenseButton').addEventListener('click', function () {
        setTypeSelection('edit', 'Expense');
    });

    document.getElementById('editIncomeButton').addEventListener('click', function () {
        setTypeSelection('edit', 'Income');
    });

    // Handle form submission for editing a category
    document.getElementById('editCategoryForm').addEventListener('submit', async function (event) {
        event.preventDefault();

        const formData = new FormData(this);

        try {
            const id = formData.get('Id');

            const response = await fetch(`/Category/Edit/${id}`, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                // Close the modal before refreshing the page
                document.getElementById('editCategoryModal').classList.add('hidden');

                // Refresh the page to show the updated category
                window.location.reload();
            } else {
                alert('Failed to update category. Please try again.');
            }
        } catch (error) {
            console.error('Error updating category:', error);
            alert('Error occurred while updating the category.');
        }
    });

    // Handle category deletion
    document.getElementById('deleteButton').addEventListener('click', async function () {
        const id = document.getElementById('editId').value;

        if (confirm('Are you sure you want to delete this category?')) {
            // Create a FormData object
            const formData = new FormData();
            formData.append('__RequestVerificationToken', document.querySelector('#editCategoryForm input[name="__RequestVerificationToken"]').value);

            try {
                const response = await fetch(`/Category/Delete/${id}`, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    // Close the modal before refreshing the page
                    document.getElementById('editCategoryModal').classList.add('hidden');

                    // Refresh the page to remove the deleted category
                    window.location.reload();
                } else {
                    alert('Failed to delete category. Please try again.');
                }
            } catch (error) {
                console.error('Error deleting category:', error);
                alert('Error occurred while deleting the category.');
            }
        }
    });

    // Function to handle type selection and highlight the selected button
    function setTypeSelection(modalType, selectedType) {
        if (modalType === 'create') {
            const expenseButton = document.getElementById('createExpenseButton');
            const incomeButton = document.getElementById('createIncomeButton');
            const typeInput = document.getElementById('createTypeInput');

            typeInput.value = selectedType;

            if (selectedType === 'Expense') {
                expenseButton.classList.add('bg-blue-500', 'text-white');
                incomeButton.classList.remove('bg-blue-500', 'text-white');
            } else {
                incomeButton.classList.add('bg-blue-500', 'text-white');
                expenseButton.classList.remove('bg-blue-500', 'text-white');
            }
        } else if (modalType === 'edit') {
            const expenseButton = document.getElementById('editExpenseButton');
            const incomeButton = document.getElementById('editIncomeButton');
            const typeInput = document.getElementById('editTypeInput');

            typeInput.value = selectedType;

            if (selectedType === 'Expense') {
                expenseButton.classList.add('bg-blue-500', 'text-white');
                incomeButton.classList.remove('bg-blue-500', 'text-white');
            } else {
                incomeButton.classList.add('bg-blue-500', 'text-white');
                expenseButton.classList.remove('bg-blue-500', 'text-white');
            }
        }
    }
</script>
