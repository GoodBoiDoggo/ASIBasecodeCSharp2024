@model ASI.Basecode.WebApp.Models.CategoryModel

<div id="editCategoryModal" class="fixed z-50 inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-1/3 relative">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-bold">Edit Category</h2>
            <button id="closeEditModal" class="text-gray-400 hover:text-gray-600" onclick="closeEditModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <p class="mb-4 text-sm text-gray-500">Fill-out all the fields below to Edit account</p>

        <!-- Form -->
        <form id="editCategoryForm" method="post">
            @Html.AntiForgeryToken()

            <!-- Hidden ID Field -->
            <input type="hidden" name="Id" value="@Model.Id" />

            <!-- Type Selector (Expense/Income) -->
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700">Type</label>
                <div class="flex mt-2">
                    <input type="radio" id="expense" name="Type" value="Expense" class="hidden peer" @(Model.Type == "Expense" ? "checked" : "")>
                    <label for="expense" class="peer-checked:bg-blue-500 peer-checked:text-white px-6 py-2 border border-gray-300 cursor-pointer rounded-l-md">
                        Expense
                    </label>
                    <input type="radio" id="income" name="Type" value="Income" class="hidden peer" @(Model.Type == "Income" ? "checked" : "")>
                    <label for="income" class="peer-checked:bg-blue-500 peer-checked:text-white px-6 py-2 border border-gray-300 cursor-pointer rounded-r-md">
                        Income
                    </label>
                </div>
            </div>

            <!-- Name Input -->
            <div class="mb-6">
                <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                <input type="text" name="Name" id="editName" value="@Model.Name" placeholder="Enter Name" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" required />
            </div>

            <!-- Icon Input -->
            <div class="mb-6">
                <label for="icon" class="block text-sm font-medium text-gray-700">Icon</label>
                <select name="Icon" id="icon" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" onchange="showIconPreview()">
                    <option value="fas fa-apple-alt" selected="@((Model.Icon == "fas fa-apple-alt") ? "selected" : null)">Apple (Food)</option>
                    <option value="fas fa-shopping-bag" selected="@((Model.Icon == "fas fa-shopping-bag") ? "selected" : null)">Shopping Bag</option>
                    <option value="fas fa-bolt" selected="@((Model.Icon == "fas fa-bolt") ? "selected" : null)">Bolt (Electricity)</option>
                    <option value="fas fa-wallet" selected="@((Model.Icon == "fas fa-wallet") ? "selected" : null)">Wallet (Income)</option>
                    <option value="fas fa-money-bill-wave" selected="@((Model.Icon == "fas fa-money-bill-wave") ? "selected" : null)">Money (Expense)</option>
                </select>
            </div>

            <!-- Icon Preview -->
            <div class="mt-4" id="iconPreview">
                <p class="text-sm text-gray-500">Selected Icon Preview:</p>
                <i id="iconPreviewElement" class="text-4xl @(Model.Icon)"></i>
            </div>

            <!-- Color Picker -->
            <div class="mb-6">
                <label for="colorPicker" class="block text-sm font-medium text-gray-700">Select Color</label>
                <input type="color" name="Color" id="editColorPicker" value="@Model.Color" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" required />
            </div>

            <!-- Error Message Placeholder -->
            <div id="errorMessage" class="text-red-500 text-sm hidden"></div>

            <!-- Save and Delete Buttons -->
            <div class="flex justify-between mt-6">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-md">
                    Save
                </button>
                <button type="button" class="bg-red-500 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-md" onclick="deleteCategory(@Model.Id)">
                    Delete
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Function to close the Edit modal
    function closeEditModal() {
        document.getElementById('editCategoryModal').classList.add('hidden');
    }

    // Function to update the icon preview when an option is selected
    function showIconPreview() {
        const selectedIcon = document.getElementById('icon').value;
        const iconPreviewElement = document.getElementById('iconPreviewElement');
        
        // Update the class of the preview element to show the selected icon
        iconPreviewElement.className = selectedIcon + ' text-4xl';
    }

    // Ensure the icon preview is updated on page load
    document.addEventListener('DOMContentLoaded', function () {
        showIconPreview();
    });

    // Function to handle form submission
    document.getElementById('editCategoryForm').addEventListener('submit', async function (event) {
        event.preventDefault();

        const formData = new FormData(this);
        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        try {
            const response = await fetch(`/Category/Edit/${formData.get('Id')}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': csrfToken
                },
                body: formData
            });

            if (response.ok) {
                document.getElementById('editCategoryModal').classList.add('hidden');
                location.reload(); // Optionally reload the page
            } else {
                document.getElementById('errorMessage').innerText = 'Failed to save category changes.';
                document.getElementById('errorMessage').classList.remove('hidden');
            }
        } catch (error) {
            console.error('Error saving category:', error);
            document.getElementById('errorMessage').innerText = 'Error occurred while saving the category.';
            document.getElementById('errorMessage').classList.remove('hidden');
        }
    });

    // Function to handle category deletion
    async function deleteCategory(categoryId) {
        if (confirm('Are you sure you want to delete this category?')) {
            try {
                const response = await fetch(`/Category/Delete/${categoryId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    location.reload(); // Optionally reload the page to reflect the deletion
                } else {
                    alert('Failed to delete category.');
                }
            } catch (error) {
                console.error('Error deleting category:', error);
                alert('Error occurred while deleting the category.');
            }
        }
    }
</script>
